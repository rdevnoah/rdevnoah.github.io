<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tidy first? (1)</title>
      <link href="/2024/05/23/tidy-first-1/"/>
      <url>/2024/05/23/tidy-first-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Chapter-1-보호구문-Guard-Clause"><a href="#Chapter-1-보호구문-Guard-Clause" class="headerlink" title="Chapter 1. 보호구문 (Guard Clause)"></a>Chapter 1. 보호구문 (Guard Clause)</h3><hr><p>특정 조건이 만족되지 않을 때 함수 실행을 조기에 종료하여, 코드의 가독성을 높이고 불필요한 중첩을 방지하는 패턴이다. 보호구문은 일반적으로 함수의 시작 부분에 위치하여 조건을 검사하고, 조건이 만족되지 않으면 함수를 반환한다. 이를 통해 주요 로직이 단순해지고 명확해진다.<br>(코드가 가로로 길어지는 스파게티를 막을 수 있다.)</p><p>직전 회사에서 코드리뷰 시에 관련된 지적을 많이 받은 기억이 난다. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (조건)</span><br><span class="line">    <span class="keyword">if</span> (다른 조건)</span><br><span class="line">        .. 코드 ..</span><br></pre></td></tr></table></figure><p>위와 같은 형태는 아래와 같이 변경한다. 원하는 동작이 모든 조건을 통과하면 가장 안쪽의 조건문에 로직이 위치할 수 밖에 없다. 조건에 부응하지 않으면 그대로 return 하는 것과 같이 명시적으로 코드를 작성한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (조건 부정)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> (다른 조건 부정)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>아래는 로그인 시 사용자 검증하는 예제에 적용한 내용이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad case</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loginBadCase</span><span class="params">(username: <span class="type">String</span>?, password: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (username.isEmpty() &amp;&amp; password.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isValidUser(username, password)) &#123;</span><br><span class="line">                    println(<span class="string">&quot;Login successful&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    println(<span class="string">&quot;Invalid username or password&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">&quot;Username or password is empty&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            println(<span class="string">&quot;Password is null&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Username is null&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loginGoodCase</span><span class="params">(username: <span class="type">String</span>?, password: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;Username is null&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (password == <span class="literal">null</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;Password is null&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (username.isEmpty() || password.isEmpty()) &#123;</span><br><span class="line">        println(<span class="string">&quot;Username or password is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isValidUser(username, password) == <span class="literal">false</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;Invalid username or password&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    println(<span class="string">&quot;Login Successful&quot;</span>)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isValidUser</span><span class="params">(username: <span class="type">String</span>, password: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="comment">// 사용자 검증 로직</span></span><br><span class="line">    <span class="keyword">return</span> username == <span class="string">&quot;user&quot;</span> &amp;&amp; password == <span class="string">&quot;password&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위의 <code>loginGoodCase()</code> 는 마치 “코드의 세부 사항을 살펴보기 전에 염두에 두어야 할 몇 가지 전제 조건이 있습니다.” 라고 말하는 것처럼 보인다.<br>‘로그인’ 이라는 해당 메소드의 핵심 로직은 선행 된 조건을 모두 확인한 뒤 가장 마지막에 이루어진다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> TidyFirst </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog!</title>
      <link href="/2024/05/23/First-Blog-Post/"/>
      <url>/2024/05/23/First-Blog-Post/</url>
      
        <content type="html"><![CDATA[<p>Hi, there!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
